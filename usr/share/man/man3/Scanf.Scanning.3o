.TH "Module" Scanf.Scanning "2004-08-26" OCamldoc "OCaml library"
.SH NAME
Scanf.Scanning \- Scanning buffers.
.SH Module
Module   Scanf.Scanning
.SH Documentation
.sp
Module
.BI "Scanning"
 : 
.B sig  end

.sp
Scanning buffers.
.sp

.sp

.sp
.sp
.I type scanbuf 

.sp
The type of scanning buffers. A scanning buffer is the argument passed
to the scanning functions used by the 
.B scanf
family of functions.
The scanning buffer holds the current state of the scan, plus
a function to get the next char from the input, and a token buffer
to store the string matched so far.
.sp

.sp

.I val stdib 
: 
.B scanbuf
.sp
The scanning buffer reading from 
.B stdin
.
.B stdib
is equivalent to 
.B Scanning.from_channel stdin
.
.sp

.sp

.I val from_string 
: 
.B string -> scanbuf
.sp

.B Scanning.from_string s
returns a scanning buffer which reads
from the given string.
Reading starts from the first character in the string.
The end-of-input condition is set when the end of the string is reached.
.sp

.sp

.I val from_file 
: 
.B string -> scanbuf
.sp
Bufferized file reading in text mode. The efficient and usual
way to scan text mode files (in effect, 
.B from_file
returns a
buffer that reads characters in large chunks, rather than one
character at a time as buffers returned by 
.B from_channel
do).
.B Scanning.from_file fname
returns a scanning buffer which reads
from the given file 
.B fname
in text mode.
.sp

.sp

.I val from_file_bin 
: 
.B string -> scanbuf
.sp
Bufferized file reading in binary mode.
.sp

.sp

.I val from_function 
: 
.B (unit -> char) -> scanbuf
.sp

.B Scanning.from_function f
returns a scanning buffer with
the given function as its reading method.
When scanning needs one more character, the given function is called.
When the function has no more character to provide, it must signal
an end-of-input condition by raising the exception 
.B End_of_file
.
.sp

.sp

.I val from_channel 
: 
.B Pervasives.in_channel -> scanbuf
.sp

.B Scanning.from_channel inchan
returns a scanning buffer which reads
one character at a time from the input channel 
.B inchan
, starting at the
current reading position.
.sp

.sp

.I val end_of_input 
: 
.B scanbuf -> bool
.sp

.B Scanning.end_of_input scanbuf
tests the end of input condition
of the given buffer.
.sp

.sp

.I val beginning_of_input 
: 
.B scanbuf -> bool
.sp

.B Scanning.beginning_of_input scanbuf
tests the beginning of input
condition of the given buffer.
.sp

.sp
